;; ==========================================================
;; Class accessors
;; Bigloo (4.5a)
;; Inria -- Sophia Antipolis     Mon Jul 18 01:34:29 PM CEST 2022 
;; (bigloo -classgen SawMill/bbv-types.scm)
;; ==========================================================

;; The directives
(directives

;; blockV
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-blockV::blockV label1233::int preds1234::pair-nil succs1235::pair-nil first1236::pair-nil versions1237::pair-nil %mark1238::long merge1239::bool)
    (inline blockV?::bool ::obj)
    (blockV-nil::blockV)
    (inline blockV-merge::bool ::blockV)
    (inline blockV-merge-set! ::blockV ::bool)
    (inline blockV-%mark::long ::blockV)
    (inline blockV-%mark-set! ::blockV ::long)
    (inline blockV-versions::pair-nil ::blockV)
    (inline blockV-versions-set! ::blockV ::pair-nil)
    (inline blockV-first::pair-nil ::blockV)
    (inline blockV-first-set! ::blockV ::pair-nil)
    (inline blockV-succs::pair-nil ::blockV)
    (inline blockV-succs-set! ::blockV ::pair-nil)
    (inline blockV-preds::pair-nil ::blockV)
    (inline blockV-preds-set! ::blockV ::pair-nil)
    (inline blockV-label::int ::blockV)
    (inline blockV-label-set! ::blockV ::int))))

;; blockS
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-blockS::blockS label1222::int preds1223::pair-nil succs1224::pair-nil first1225::pair-nil %mark1226::long %hash1227::obj %blacklist1228::obj parent1229::obj wblock1230::obj cost1231::long)
    (inline blockS?::bool ::obj)
    (blockS-nil::blockS)
    (inline blockS-cost::long ::blockS)
    (inline blockS-cost-set! ::blockS ::long)
    (inline blockS-wblock::obj ::blockS)
    (inline blockS-wblock-set! ::blockS ::obj)
    (inline blockS-parent::obj ::blockS)
    (inline blockS-%blacklist::obj ::blockS)
    (inline blockS-%blacklist-set! ::blockS ::obj)
    (inline blockS-%hash::obj ::blockS)
    (inline blockS-%hash-set! ::blockS ::obj)
    (inline blockS-%mark::long ::blockS)
    (inline blockS-%mark-set! ::blockS ::long)
    (inline blockS-first::pair-nil ::blockS)
    (inline blockS-first-set! ::blockS ::pair-nil)
    (inline blockS-succs::pair-nil ::blockS)
    (inline blockS-succs-set! ::blockS ::pair-nil)
    (inline blockS-preds::pair-nil ::blockS)
    (inline blockS-preds-set! ::blockS ::pair-nil)
    (inline blockS-label::int ::blockS)
    (inline blockS-label-set! ::blockS ::int))))

;; rtl_ins/bbv
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-rtl_ins/bbv::rtl_ins/bbv loc1211::obj %spill1212::pair-nil dest1213::obj fun1214::rtl_fun args1215::pair-nil def1216::obj out1217::obj in1218::obj ctx1219::pair-nil %hash1220::obj)
    (inline rtl_ins/bbv?::bool ::obj)
    (rtl_ins/bbv-nil::rtl_ins/bbv)
    (inline rtl_ins/bbv-%hash::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-%hash-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-ctx::pair-nil ::rtl_ins/bbv)
    (inline rtl_ins/bbv-ctx-set! ::rtl_ins/bbv ::pair-nil)
    (inline rtl_ins/bbv-in::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-in-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-out::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-out-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-def::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-def-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-args::pair-nil ::rtl_ins/bbv)
    (inline rtl_ins/bbv-args-set! ::rtl_ins/bbv ::pair-nil)
    (inline rtl_ins/bbv-fun::rtl_fun ::rtl_ins/bbv)
    (inline rtl_ins/bbv-fun-set! ::rtl_ins/bbv ::rtl_fun)
    (inline rtl_ins/bbv-dest::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-dest-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-%spill::pair-nil ::rtl_ins/bbv)
    (inline rtl_ins/bbv-%spill-set! ::rtl_ins/bbv ::pair-nil)
    (inline rtl_ins/bbv-loc::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-loc-set! ::rtl_ins/bbv ::obj))))

;; bbv-ctxentry
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-bbv-ctxentry::bbv-ctxentry reg1205::rtl_reg types1206::pair polarity1207::bool value1208::obj aliases1209::pair-nil)
    (inline bbv-ctxentry?::bool ::obj)
    (bbv-ctxentry-nil::bbv-ctxentry)
    (inline bbv-ctxentry-aliases::pair-nil ::bbv-ctxentry)
    (inline bbv-ctxentry-aliases-set! ::bbv-ctxentry ::pair-nil)
    (inline bbv-ctxentry-value::obj ::bbv-ctxentry)
    (inline bbv-ctxentry-polarity::bool ::bbv-ctxentry)
    (inline bbv-ctxentry-types::pair ::bbv-ctxentry)
    (inline bbv-ctxentry-reg::rtl_reg ::bbv-ctxentry)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; blockV
(define-inline (make-blockV::blockV label1233::int preds1234::pair-nil succs1235::pair-nil first1236::pair-nil versions1237::pair-nil %mark1238::long merge1239::bool) (instantiate::blockV (label label1233) (preds preds1234) (succs succs1235) (first first1236) (versions versions1237) (%mark %mark1238) (merge merge1239)))
(define-inline (blockV?::bool obj::obj) ((@ isa? __object) obj (@ blockV saw_bbv-types)))
(define (blockV-nil::blockV) (class-nil (@ blockV saw_bbv-types)))
(define-inline (blockV-merge::bool o::blockV) (-> |#!bigloo_wallow| o merge))
(define-inline (blockV-merge-set! o::blockV v::bool) (set! (-> |#!bigloo_wallow| o merge) v))
(define-inline (blockV-%mark::long o::blockV) (-> |#!bigloo_wallow| o %mark))
(define-inline (blockV-%mark-set! o::blockV v::long) (set! (-> |#!bigloo_wallow| o %mark) v))
(define-inline (blockV-versions::pair-nil o::blockV) (-> |#!bigloo_wallow| o versions))
(define-inline (blockV-versions-set! o::blockV v::pair-nil) (set! (-> |#!bigloo_wallow| o versions) v))
(define-inline (blockV-first::pair-nil o::blockV) (-> |#!bigloo_wallow| o first))
(define-inline (blockV-first-set! o::blockV v::pair-nil) (set! (-> |#!bigloo_wallow| o first) v))
(define-inline (blockV-succs::pair-nil o::blockV) (-> |#!bigloo_wallow| o succs))
(define-inline (blockV-succs-set! o::blockV v::pair-nil) (set! (-> |#!bigloo_wallow| o succs) v))
(define-inline (blockV-preds::pair-nil o::blockV) (-> |#!bigloo_wallow| o preds))
(define-inline (blockV-preds-set! o::blockV v::pair-nil) (set! (-> |#!bigloo_wallow| o preds) v))
(define-inline (blockV-label::int o::blockV) (-> |#!bigloo_wallow| o label))
(define-inline (blockV-label-set! o::blockV v::int) (set! (-> |#!bigloo_wallow| o label) v))

;; blockS
(define-inline (make-blockS::blockS label1222::int preds1223::pair-nil succs1224::pair-nil first1225::pair-nil %mark1226::long %hash1227::obj %blacklist1228::obj parent1229::obj wblock1230::obj cost1231::long) (instantiate::blockS (label label1222) (preds preds1223) (succs succs1224) (first first1225) (%mark %mark1226) (%hash %hash1227) (%blacklist %blacklist1228) (parent parent1229) (wblock wblock1230) (cost cost1231)))
(define-inline (blockS?::bool obj::obj) ((@ isa? __object) obj (@ blockS saw_bbv-types)))
(define (blockS-nil::blockS) (class-nil (@ blockS saw_bbv-types)))
(define-inline (blockS-cost::long o::blockS) (-> |#!bigloo_wallow| o cost))
(define-inline (blockS-cost-set! o::blockS v::long) (set! (-> |#!bigloo_wallow| o cost) v))
(define-inline (blockS-wblock::obj o::blockS) (-> |#!bigloo_wallow| o wblock))
(define-inline (blockS-wblock-set! o::blockS v::obj) (set! (-> |#!bigloo_wallow| o wblock) v))
(define-inline (blockS-parent::obj o::blockS) (-> |#!bigloo_wallow| o parent))
(define-inline (blockS-parent-set! o::blockS v::obj) (set! (-> |#!bigloo_wallow| o parent) v))
(define-inline (blockS-%blacklist::obj o::blockS) (-> |#!bigloo_wallow| o %blacklist))
(define-inline (blockS-%blacklist-set! o::blockS v::obj) (set! (-> |#!bigloo_wallow| o %blacklist) v))
(define-inline (blockS-%hash::obj o::blockS) (-> |#!bigloo_wallow| o %hash))
(define-inline (blockS-%hash-set! o::blockS v::obj) (set! (-> |#!bigloo_wallow| o %hash) v))
(define-inline (blockS-%mark::long o::blockS) (-> |#!bigloo_wallow| o %mark))
(define-inline (blockS-%mark-set! o::blockS v::long) (set! (-> |#!bigloo_wallow| o %mark) v))
(define-inline (blockS-first::pair-nil o::blockS) (-> |#!bigloo_wallow| o first))
(define-inline (blockS-first-set! o::blockS v::pair-nil) (set! (-> |#!bigloo_wallow| o first) v))
(define-inline (blockS-succs::pair-nil o::blockS) (-> |#!bigloo_wallow| o succs))
(define-inline (blockS-succs-set! o::blockS v::pair-nil) (set! (-> |#!bigloo_wallow| o succs) v))
(define-inline (blockS-preds::pair-nil o::blockS) (-> |#!bigloo_wallow| o preds))
(define-inline (blockS-preds-set! o::blockS v::pair-nil) (set! (-> |#!bigloo_wallow| o preds) v))
(define-inline (blockS-label::int o::blockS) (-> |#!bigloo_wallow| o label))
(define-inline (blockS-label-set! o::blockS v::int) (set! (-> |#!bigloo_wallow| o label) v))

;; rtl_ins/bbv
(define-inline (make-rtl_ins/bbv::rtl_ins/bbv loc1211::obj %spill1212::pair-nil dest1213::obj fun1214::rtl_fun args1215::pair-nil def1216::obj out1217::obj in1218::obj ctx1219::pair-nil %hash1220::obj) (instantiate::rtl_ins/bbv (loc loc1211) (%spill %spill1212) (dest dest1213) (fun fun1214) (args args1215) (def def1216) (out out1217) (in in1218) (ctx ctx1219) (%hash %hash1220)))
(define-inline (rtl_ins/bbv?::bool obj::obj) ((@ isa? __object) obj (@ rtl_ins/bbv saw_bbv-types)))
(define (rtl_ins/bbv-nil::rtl_ins/bbv) (class-nil (@ rtl_ins/bbv saw_bbv-types)))
(define-inline (rtl_ins/bbv-%hash::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o %hash))
(define-inline (rtl_ins/bbv-%hash-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o %hash) v))
(define-inline (rtl_ins/bbv-ctx::pair-nil o::rtl_ins/bbv) (-> |#!bigloo_wallow| o ctx))
(define-inline (rtl_ins/bbv-ctx-set! o::rtl_ins/bbv v::pair-nil) (set! (-> |#!bigloo_wallow| o ctx) v))
(define-inline (rtl_ins/bbv-in::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o in))
(define-inline (rtl_ins/bbv-in-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o in) v))
(define-inline (rtl_ins/bbv-out::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o out))
(define-inline (rtl_ins/bbv-out-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o out) v))
(define-inline (rtl_ins/bbv-def::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o def))
(define-inline (rtl_ins/bbv-def-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o def) v))
(define-inline (rtl_ins/bbv-args::pair-nil o::rtl_ins/bbv) (-> |#!bigloo_wallow| o args))
(define-inline (rtl_ins/bbv-args-set! o::rtl_ins/bbv v::pair-nil) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (rtl_ins/bbv-fun::rtl_fun o::rtl_ins/bbv) (-> |#!bigloo_wallow| o fun))
(define-inline (rtl_ins/bbv-fun-set! o::rtl_ins/bbv v::rtl_fun) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (rtl_ins/bbv-dest::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o dest))
(define-inline (rtl_ins/bbv-dest-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o dest) v))
(define-inline (rtl_ins/bbv-%spill::pair-nil o::rtl_ins/bbv) (-> |#!bigloo_wallow| o %spill))
(define-inline (rtl_ins/bbv-%spill-set! o::rtl_ins/bbv v::pair-nil) (set! (-> |#!bigloo_wallow| o %spill) v))
(define-inline (rtl_ins/bbv-loc::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o loc))
(define-inline (rtl_ins/bbv-loc-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; bbv-ctxentry
(define-inline (make-bbv-ctxentry::bbv-ctxentry reg1205::rtl_reg types1206::pair polarity1207::bool value1208::obj aliases1209::pair-nil) (instantiate::bbv-ctxentry (reg reg1205) (types types1206) (polarity polarity1207) (value value1208) (aliases aliases1209)))
(define-inline (bbv-ctxentry?::bool obj::obj) ((@ isa? __object) obj (@ bbv-ctxentry saw_bbv-types)))
(define (bbv-ctxentry-nil::bbv-ctxentry) (class-nil (@ bbv-ctxentry saw_bbv-types)))
(define-inline (bbv-ctxentry-aliases::pair-nil o::bbv-ctxentry) (-> |#!bigloo_wallow| o aliases))
(define-inline (bbv-ctxentry-aliases-set! o::bbv-ctxentry v::pair-nil) (set! (-> |#!bigloo_wallow| o aliases) v))
(define-inline (bbv-ctxentry-value::obj o::bbv-ctxentry) (-> |#!bigloo_wallow| o value))
(define-inline (bbv-ctxentry-value-set! o::bbv-ctxentry v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (bbv-ctxentry-polarity::bool o::bbv-ctxentry) (-> |#!bigloo_wallow| o polarity))
(define-inline (bbv-ctxentry-polarity-set! o::bbv-ctxentry v::bool) (set! (-> |#!bigloo_wallow| o polarity) v))
(define-inline (bbv-ctxentry-types::pair o::bbv-ctxentry) (-> |#!bigloo_wallow| o types))
(define-inline (bbv-ctxentry-types-set! o::bbv-ctxentry v::pair) (set! (-> |#!bigloo_wallow| o types) v))
(define-inline (bbv-ctxentry-reg::rtl_reg o::bbv-ctxentry) (-> |#!bigloo_wallow| o reg))
(define-inline (bbv-ctxentry-reg-set! o::bbv-ctxentry v::rtl_reg) (set! (-> |#!bigloo_wallow| o reg) v))
))
