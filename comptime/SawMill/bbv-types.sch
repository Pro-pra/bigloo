;; ==========================================================
;; Class accessors
;; Bigloo (4.5a)
;; Inria -- Sophia Antipolis     Thu 14 Jul 2022 06:23:22 AM CEST 
;; (bigloo -classgen SawMill/bbv-types.scm)
;; ==========================================================

;; The directives
(directives

;; blockV
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-blockV::blockV label1253::int preds1254::pair-nil succs1255::pair-nil first1256::pair-nil versions1257::pair-nil %mark1258::long merge1259::bool)
    (inline blockV?::bool ::obj)
    (blockV-nil::blockV)
    (inline blockV-merge::bool ::blockV)
    (inline blockV-merge-set! ::blockV ::bool)
    (inline blockV-%mark::long ::blockV)
    (inline blockV-%mark-set! ::blockV ::long)
    (inline blockV-versions::pair-nil ::blockV)
    (inline blockV-versions-set! ::blockV ::pair-nil)
    (inline blockV-first::pair-nil ::blockV)
    (inline blockV-first-set! ::blockV ::pair-nil)
    (inline blockV-succs::pair-nil ::blockV)
    (inline blockV-succs-set! ::blockV ::pair-nil)
    (inline blockV-preds::pair-nil ::blockV)
    (inline blockV-preds-set! ::blockV ::pair-nil)
    (inline blockV-label::int ::blockV)
    (inline blockV-label-set! ::blockV ::int))))

;; blockS
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-blockS::blockS label1243::int preds1244::pair-nil succs1245::pair-nil first1246::pair-nil %mark1247::long %hash1248::obj %blacklist1249::obj parent1250::obj mblock1251::obj)
    (inline blockS?::bool ::obj)
    (blockS-nil::blockS)
    (inline blockS-mblock::obj ::blockS)
    (inline blockS-mblock-set! ::blockS ::obj)
    (inline blockS-parent::obj ::blockS)
    (inline blockS-%blacklist::obj ::blockS)
    (inline blockS-%blacklist-set! ::blockS ::obj)
    (inline blockS-%hash::obj ::blockS)
    (inline blockS-%hash-set! ::blockS ::obj)
    (inline blockS-%mark::long ::blockS)
    (inline blockS-%mark-set! ::blockS ::long)
    (inline blockS-first::pair-nil ::blockS)
    (inline blockS-first-set! ::blockS ::pair-nil)
    (inline blockS-succs::pair-nil ::blockS)
    (inline blockS-succs-set! ::blockS ::pair-nil)
    (inline blockS-preds::pair-nil ::blockS)
    (inline blockS-preds-set! ::blockS ::pair-nil)
    (inline blockS-label::int ::blockS)
    (inline blockS-label-set! ::blockS ::int))))

;; rtl_ins/bbv
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-rtl_ins/bbv::rtl_ins/bbv loc1232::obj %spill1233::pair-nil dest1234::obj fun1235::rtl_fun args1236::pair-nil def1237::obj out1238::obj in1239::obj ctx1240::bbv-ctx %hash1241::obj)
    (inline rtl_ins/bbv?::bool ::obj)
    (rtl_ins/bbv-nil::rtl_ins/bbv)
    (inline rtl_ins/bbv-%hash::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-%hash-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-ctx::bbv-ctx ::rtl_ins/bbv)
    (inline rtl_ins/bbv-ctx-set! ::rtl_ins/bbv ::bbv-ctx)
    (inline rtl_ins/bbv-in::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-in-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-out::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-out-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-def::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-def-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-args::pair-nil ::rtl_ins/bbv)
    (inline rtl_ins/bbv-args-set! ::rtl_ins/bbv ::pair-nil)
    (inline rtl_ins/bbv-fun::rtl_fun ::rtl_ins/bbv)
    (inline rtl_ins/bbv-fun-set! ::rtl_ins/bbv ::rtl_fun)
    (inline rtl_ins/bbv-dest::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-dest-set! ::rtl_ins/bbv ::obj)
    (inline rtl_ins/bbv-%spill::pair-nil ::rtl_ins/bbv)
    (inline rtl_ins/bbv-%spill-set! ::rtl_ins/bbv ::pair-nil)
    (inline rtl_ins/bbv-loc::obj ::rtl_ins/bbv)
    (inline rtl_ins/bbv-loc-set! ::rtl_ins/bbv ::obj))))

;; bbv-ctx
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-bbv-ctx::bbv-ctx cost1229::long entries1230::pair-nil)
    (inline bbv-ctx?::bool ::obj)
    (bbv-ctx-nil::bbv-ctx)
    (inline bbv-ctx-entries::pair-nil ::bbv-ctx)
    (inline bbv-ctx-entries-set! ::bbv-ctx ::pair-nil)
    (inline bbv-ctx-cost::long ::bbv-ctx)
    (inline bbv-ctx-cost-set! ::bbv-ctx ::long))))

;; bbv-ctxentry
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-bbv-ctxentry::bbv-ctxentry reg1223::rtl_reg types1224::pair polarity1225::bool value1226::obj aliases1227::pair-nil)
    (inline bbv-ctxentry?::bool ::obj)
    (bbv-ctxentry-nil::bbv-ctxentry)
    (inline bbv-ctxentry-aliases::pair-nil ::bbv-ctxentry)
    (inline bbv-ctxentry-aliases-set! ::bbv-ctxentry ::pair-nil)
    (inline bbv-ctxentry-value::obj ::bbv-ctxentry)
    (inline bbv-ctxentry-polarity::bool ::bbv-ctxentry)
    (inline bbv-ctxentry-types::pair ::bbv-ctxentry)
    (inline bbv-ctxentry-reg::rtl_reg ::bbv-ctxentry))))

;; bbv-wsentry
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-bbv-wsentry::bbv-wsentry ctx1217::bbv-ctx cost1218::long stack1219::pair-nil block1220::blockS anchor1221::blockS)
    (inline bbv-wsentry?::bool ::obj)
    (bbv-wsentry-nil::bbv-wsentry)
    (inline bbv-wsentry-anchor::blockS ::bbv-wsentry)
    (inline bbv-wsentry-anchor-set! ::bbv-wsentry ::blockS)
    (inline bbv-wsentry-block::blockS ::bbv-wsentry)
    (inline bbv-wsentry-block-set! ::bbv-wsentry ::blockS)
    (inline bbv-wsentry-stack::pair-nil ::bbv-wsentry)
    (inline bbv-wsentry-stack-set! ::bbv-wsentry ::pair-nil)
    (inline bbv-wsentry-cost::long ::bbv-wsentry)
    (inline bbv-wsentry-cost-set! ::bbv-wsentry ::long)
    (inline bbv-wsentry-ctx::bbv-ctx ::bbv-wsentry)
    (inline bbv-wsentry-ctx-set! ::bbv-wsentry ::bbv-ctx)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; blockV
(define-inline (make-blockV::blockV label1253::int preds1254::pair-nil succs1255::pair-nil first1256::pair-nil versions1257::pair-nil %mark1258::long merge1259::bool) (instantiate::blockV (label label1253) (preds preds1254) (succs succs1255) (first first1256) (versions versions1257) (%mark %mark1258) (merge merge1259)))
(define-inline (blockV?::bool obj::obj) ((@ isa? __object) obj (@ blockV saw_bbv-types)))
(define (blockV-nil::blockV) (class-nil (@ blockV saw_bbv-types)))
(define-inline (blockV-merge::bool o::blockV) (-> |#!bigloo_wallow| o merge))
(define-inline (blockV-merge-set! o::blockV v::bool) (set! (-> |#!bigloo_wallow| o merge) v))
(define-inline (blockV-%mark::long o::blockV) (-> |#!bigloo_wallow| o %mark))
(define-inline (blockV-%mark-set! o::blockV v::long) (set! (-> |#!bigloo_wallow| o %mark) v))
(define-inline (blockV-versions::pair-nil o::blockV) (-> |#!bigloo_wallow| o versions))
(define-inline (blockV-versions-set! o::blockV v::pair-nil) (set! (-> |#!bigloo_wallow| o versions) v))
(define-inline (blockV-first::pair-nil o::blockV) (-> |#!bigloo_wallow| o first))
(define-inline (blockV-first-set! o::blockV v::pair-nil) (set! (-> |#!bigloo_wallow| o first) v))
(define-inline (blockV-succs::pair-nil o::blockV) (-> |#!bigloo_wallow| o succs))
(define-inline (blockV-succs-set! o::blockV v::pair-nil) (set! (-> |#!bigloo_wallow| o succs) v))
(define-inline (blockV-preds::pair-nil o::blockV) (-> |#!bigloo_wallow| o preds))
(define-inline (blockV-preds-set! o::blockV v::pair-nil) (set! (-> |#!bigloo_wallow| o preds) v))
(define-inline (blockV-label::int o::blockV) (-> |#!bigloo_wallow| o label))
(define-inline (blockV-label-set! o::blockV v::int) (set! (-> |#!bigloo_wallow| o label) v))

;; blockS
(define-inline (make-blockS::blockS label1243::int preds1244::pair-nil succs1245::pair-nil first1246::pair-nil %mark1247::long %hash1248::obj %blacklist1249::obj parent1250::obj mblock1251::obj) (instantiate::blockS (label label1243) (preds preds1244) (succs succs1245) (first first1246) (%mark %mark1247) (%hash %hash1248) (%blacklist %blacklist1249) (parent parent1250) (mblock mblock1251)))
(define-inline (blockS?::bool obj::obj) ((@ isa? __object) obj (@ blockS saw_bbv-types)))
(define (blockS-nil::blockS) (class-nil (@ blockS saw_bbv-types)))
(define-inline (blockS-mblock::obj o::blockS) (-> |#!bigloo_wallow| o mblock))
(define-inline (blockS-mblock-set! o::blockS v::obj) (set! (-> |#!bigloo_wallow| o mblock) v))
(define-inline (blockS-parent::obj o::blockS) (-> |#!bigloo_wallow| o parent))
(define-inline (blockS-parent-set! o::blockS v::obj) (set! (-> |#!bigloo_wallow| o parent) v))
(define-inline (blockS-%blacklist::obj o::blockS) (-> |#!bigloo_wallow| o %blacklist))
(define-inline (blockS-%blacklist-set! o::blockS v::obj) (set! (-> |#!bigloo_wallow| o %blacklist) v))
(define-inline (blockS-%hash::obj o::blockS) (-> |#!bigloo_wallow| o %hash))
(define-inline (blockS-%hash-set! o::blockS v::obj) (set! (-> |#!bigloo_wallow| o %hash) v))
(define-inline (blockS-%mark::long o::blockS) (-> |#!bigloo_wallow| o %mark))
(define-inline (blockS-%mark-set! o::blockS v::long) (set! (-> |#!bigloo_wallow| o %mark) v))
(define-inline (blockS-first::pair-nil o::blockS) (-> |#!bigloo_wallow| o first))
(define-inline (blockS-first-set! o::blockS v::pair-nil) (set! (-> |#!bigloo_wallow| o first) v))
(define-inline (blockS-succs::pair-nil o::blockS) (-> |#!bigloo_wallow| o succs))
(define-inline (blockS-succs-set! o::blockS v::pair-nil) (set! (-> |#!bigloo_wallow| o succs) v))
(define-inline (blockS-preds::pair-nil o::blockS) (-> |#!bigloo_wallow| o preds))
(define-inline (blockS-preds-set! o::blockS v::pair-nil) (set! (-> |#!bigloo_wallow| o preds) v))
(define-inline (blockS-label::int o::blockS) (-> |#!bigloo_wallow| o label))
(define-inline (blockS-label-set! o::blockS v::int) (set! (-> |#!bigloo_wallow| o label) v))

;; rtl_ins/bbv
(define-inline (make-rtl_ins/bbv::rtl_ins/bbv loc1232::obj %spill1233::pair-nil dest1234::obj fun1235::rtl_fun args1236::pair-nil def1237::obj out1238::obj in1239::obj ctx1240::bbv-ctx %hash1241::obj) (instantiate::rtl_ins/bbv (loc loc1232) (%spill %spill1233) (dest dest1234) (fun fun1235) (args args1236) (def def1237) (out out1238) (in in1239) (ctx ctx1240) (%hash %hash1241)))
(define-inline (rtl_ins/bbv?::bool obj::obj) ((@ isa? __object) obj (@ rtl_ins/bbv saw_bbv-types)))
(define (rtl_ins/bbv-nil::rtl_ins/bbv) (class-nil (@ rtl_ins/bbv saw_bbv-types)))
(define-inline (rtl_ins/bbv-%hash::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o %hash))
(define-inline (rtl_ins/bbv-%hash-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o %hash) v))
(define-inline (rtl_ins/bbv-ctx::bbv-ctx o::rtl_ins/bbv) (-> |#!bigloo_wallow| o ctx))
(define-inline (rtl_ins/bbv-ctx-set! o::rtl_ins/bbv v::bbv-ctx) (set! (-> |#!bigloo_wallow| o ctx) v))
(define-inline (rtl_ins/bbv-in::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o in))
(define-inline (rtl_ins/bbv-in-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o in) v))
(define-inline (rtl_ins/bbv-out::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o out))
(define-inline (rtl_ins/bbv-out-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o out) v))
(define-inline (rtl_ins/bbv-def::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o def))
(define-inline (rtl_ins/bbv-def-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o def) v))
(define-inline (rtl_ins/bbv-args::pair-nil o::rtl_ins/bbv) (-> |#!bigloo_wallow| o args))
(define-inline (rtl_ins/bbv-args-set! o::rtl_ins/bbv v::pair-nil) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (rtl_ins/bbv-fun::rtl_fun o::rtl_ins/bbv) (-> |#!bigloo_wallow| o fun))
(define-inline (rtl_ins/bbv-fun-set! o::rtl_ins/bbv v::rtl_fun) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (rtl_ins/bbv-dest::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o dest))
(define-inline (rtl_ins/bbv-dest-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o dest) v))
(define-inline (rtl_ins/bbv-%spill::pair-nil o::rtl_ins/bbv) (-> |#!bigloo_wallow| o %spill))
(define-inline (rtl_ins/bbv-%spill-set! o::rtl_ins/bbv v::pair-nil) (set! (-> |#!bigloo_wallow| o %spill) v))
(define-inline (rtl_ins/bbv-loc::obj o::rtl_ins/bbv) (-> |#!bigloo_wallow| o loc))
(define-inline (rtl_ins/bbv-loc-set! o::rtl_ins/bbv v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; bbv-ctx
(define-inline (make-bbv-ctx::bbv-ctx cost1229::long entries1230::pair-nil) (instantiate::bbv-ctx (cost cost1229) (entries entries1230)))
(define-inline (bbv-ctx?::bool obj::obj) ((@ isa? __object) obj (@ bbv-ctx saw_bbv-types)))
(define (bbv-ctx-nil::bbv-ctx) (class-nil (@ bbv-ctx saw_bbv-types)))
(define-inline (bbv-ctx-entries::pair-nil o::bbv-ctx) (-> |#!bigloo_wallow| o entries))
(define-inline (bbv-ctx-entries-set! o::bbv-ctx v::pair-nil) (set! (-> |#!bigloo_wallow| o entries) v))
(define-inline (bbv-ctx-cost::long o::bbv-ctx) (-> |#!bigloo_wallow| o cost))
(define-inline (bbv-ctx-cost-set! o::bbv-ctx v::long) (set! (-> |#!bigloo_wallow| o cost) v))

;; bbv-ctxentry
(define-inline (make-bbv-ctxentry::bbv-ctxentry reg1223::rtl_reg types1224::pair polarity1225::bool value1226::obj aliases1227::pair-nil) (instantiate::bbv-ctxentry (reg reg1223) (types types1224) (polarity polarity1225) (value value1226) (aliases aliases1227)))
(define-inline (bbv-ctxentry?::bool obj::obj) ((@ isa? __object) obj (@ bbv-ctxentry saw_bbv-types)))
(define (bbv-ctxentry-nil::bbv-ctxentry) (class-nil (@ bbv-ctxentry saw_bbv-types)))
(define-inline (bbv-ctxentry-aliases::pair-nil o::bbv-ctxentry) (-> |#!bigloo_wallow| o aliases))
(define-inline (bbv-ctxentry-aliases-set! o::bbv-ctxentry v::pair-nil) (set! (-> |#!bigloo_wallow| o aliases) v))
(define-inline (bbv-ctxentry-value::obj o::bbv-ctxentry) (-> |#!bigloo_wallow| o value))
(define-inline (bbv-ctxentry-value-set! o::bbv-ctxentry v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (bbv-ctxentry-polarity::bool o::bbv-ctxentry) (-> |#!bigloo_wallow| o polarity))
(define-inline (bbv-ctxentry-polarity-set! o::bbv-ctxentry v::bool) (set! (-> |#!bigloo_wallow| o polarity) v))
(define-inline (bbv-ctxentry-types::pair o::bbv-ctxentry) (-> |#!bigloo_wallow| o types))
(define-inline (bbv-ctxentry-types-set! o::bbv-ctxentry v::pair) (set! (-> |#!bigloo_wallow| o types) v))
(define-inline (bbv-ctxentry-reg::rtl_reg o::bbv-ctxentry) (-> |#!bigloo_wallow| o reg))
(define-inline (bbv-ctxentry-reg-set! o::bbv-ctxentry v::rtl_reg) (set! (-> |#!bigloo_wallow| o reg) v))

;; bbv-wsentry
(define-inline (make-bbv-wsentry::bbv-wsentry ctx1217::bbv-ctx cost1218::long stack1219::pair-nil block1220::blockS anchor1221::blockS) (instantiate::bbv-wsentry (ctx ctx1217) (cost cost1218) (stack stack1219) (block block1220) (anchor anchor1221)))
(define-inline (bbv-wsentry?::bool obj::obj) ((@ isa? __object) obj (@ bbv-wsentry saw_bbv-types)))
(define (bbv-wsentry-nil::bbv-wsentry) (class-nil (@ bbv-wsentry saw_bbv-types)))
(define-inline (bbv-wsentry-anchor::blockS o::bbv-wsentry) (-> |#!bigloo_wallow| o anchor))
(define-inline (bbv-wsentry-anchor-set! o::bbv-wsentry v::blockS) (set! (-> |#!bigloo_wallow| o anchor) v))
(define-inline (bbv-wsentry-block::blockS o::bbv-wsentry) (-> |#!bigloo_wallow| o block))
(define-inline (bbv-wsentry-block-set! o::bbv-wsentry v::blockS) (set! (-> |#!bigloo_wallow| o block) v))
(define-inline (bbv-wsentry-stack::pair-nil o::bbv-wsentry) (-> |#!bigloo_wallow| o stack))
(define-inline (bbv-wsentry-stack-set! o::bbv-wsentry v::pair-nil) (set! (-> |#!bigloo_wallow| o stack) v))
(define-inline (bbv-wsentry-cost::long o::bbv-wsentry) (-> |#!bigloo_wallow| o cost))
(define-inline (bbv-wsentry-cost-set! o::bbv-wsentry v::long) (set! (-> |#!bigloo_wallow| o cost) v))
(define-inline (bbv-wsentry-ctx::bbv-ctx o::bbv-wsentry) (-> |#!bigloo_wallow| o ctx))
(define-inline (bbv-wsentry-ctx-set! o::bbv-wsentry v::bbv-ctx) (set! (-> |#!bigloo_wallow| o ctx) v))
))
