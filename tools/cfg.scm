;*=====================================================================*/
;*    serrano/prgm/project/bigloo/bigloo/tools/cfg.scm                 */
;*    -------------------------------------------------------------    */
;*    Author      :  Marc Feeley                                       */
;*    Creation    :  Mon Jul 17 08:14:47 2017                          */
;*    Last change :  Tue Jul  5 10:47:47 2022 (serrano)                */
;*    Copyright   :  2017-22 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    CFG (BB) dump for the dot program.                               */
;*    -------------------------------------------------------------    */
;*    The input file is generated by Bigloo with:                      */
;*                                                                     */
;*      bigloo file.scm -saw -fsaw-regalloc -fsaw-bbv -gself           */
;*                                                                     */
;*    The input basic-blocks dump is as follows:                       */
;*                                                                     */
;*    ;; -*- mode: bee -*-                                             */
;*    ;; *** sum:                                                      */
;*    ;; (!v)                                                          */
;*    (block 25                                                        */
;*     ;; ictx=()                                                      */
;*     ;; octx=(#("$g1130" "bint") #("!s" "bint"))                     */
;*     :preds ()                                                       */
;*     :succs (26)                                                     */
;*     [$g1130 <- (mov ($long->bint (loadi 0)))]                       */
;*     [!s <- (mov ($long->bint (loadi 0)))])                          */
;*                                                                     */
;*    (block 26                                                        */
;*     ;; ictx=(#("$g1130" "bint") #("!s" "bint"))                     */
;*     ;; octx=(#("$g1130" "bint") #("!s" "bint") #("!v" "vector"))    */
;*     ;; octx=(#("$g1130" "bint") #("!s" "bint") #("!v" "no-vector")) */
;*     :preds (25)                                                     */
;*     :succs (27 186)                                                 */
;*     (ifeq ($vector? !v) 186))                                       */
;*                                                                     */
;*    ...                                                              */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module cfg-dump
   (main main))

;*---------------------------------------------------------------------*/
;*    bb ...                                                           */
;*---------------------------------------------------------------------*/
(define-struct bb lbl-num preds succs instrs parent color)

;*---------------------------------------------------------------------*/
;*    list->bb ...                                                     */
;*---------------------------------------------------------------------*/
(define (list->bb l)
   (match-case l
      (((or block blockS) ?num :parent ?parent :preds ?preds :succs ?succs . ?ins)
       (bb num preds succs ins parent (get-color parent)))
      (((or block blockS) ?num :preds ?preds :succs ?succs . ?ins)
       (bb num preds succs ins 0 (get-color 0)))
      (else
       (error "list->bb" "bad syntax" l))))

;*---------------------------------------------------------------------*/
;*    *colors* ...                                                     */
;*---------------------------------------------------------------------*/
(define *colors* '())

;*---------------------------------------------------------------------*/
;*    get-color ...                                                    */
;*---------------------------------------------------------------------*/
(define (get-color num)
   (let ((col (assq num *colors*)))
      (if (pair? col)
	  (cdr col)
	  (let ((new (gennewcolor)))
	     (set! *colors* (cons (cons num new) *colors*))
	     new))))

;*---------------------------------------------------------------------*/
;*    gennewcolor ...                                                  */
;*---------------------------------------------------------------------*/
(define (gennewcolor)
   (let ((r (+fx 127 (random 127)))
	 (g (+fx 127 (random 127)))
	 (b (+fx 127 (random 127))))
      (format "#~02x~02x~02x" r g b)))

;*---------------------------------------------------------------------*/
;*    main ...                                                         */
;*---------------------------------------------------------------------*/
(define (dump-cfg name bbs)
   
   ;; For generating visual representation of control flow graph with "dot".
   
   (define nodes '())
   
   (define edges '())
   
   (define (add-node node)
      (set! nodes
	 `(,@node ,@nodes)))
   
   (define (add-edge! from to dotted? color)
      (set! edges
	 `("  " ,from " -> " ,to
	     ,(cond
		 ((and dotted? color) (format " [style = dashed; color = ~a];\n" color))
		 (dotted? " [style = dotted];\n")
		 (color (format " [color = ~a];\n" color))
		 (else ";\n"))
	     ,@edges)))
   
   (define (gen-digraph name)
      `("digraph \"" ,name "\" {\n"
	  "  graph [splines = true overlap = false rankdir = \"TD\"];\n"
	  ,@nodes
	  ,@edges
	  "}\n"))
   
   (define (gen-node id label)
      `("  " ,id " [fontname = \"Courier New\" shape = \"none\" label = "
	  ,@label
	  " ];\n"))
   
   (define (gen-table id content #!key (bgcolor "gray80"))
      `("<table border=\"0\" cellborder=\"0\" cellspacing=\"0\" cellpadding=\"0\""
	  ,@(if bgcolor `(" bgcolor=\"" ,bgcolor "\"") '())
	  ,@(if id `(" port=\"" ,id "\"") '())
	  ">"
	  ,@content
	  "</table>"))
   
   (define (gen-row content)
      `("<tr>" ,@content "</tr>"))
   
   (define (gen-col id last? content::pair #!key (align "left"))
      `(,(format "<td align=\"~a\"" align)
	  ,@(if id `(" port=\"" ,id "\"") '())
	  ,(if last? " colspan=\"20\"" "")
	  ">"
	  ,@content
	  "</td>"))
   
   (define (gen-html-label content)
      `("<" ,@content ">"))
   
   (define (escape obj)
      (cond
	 ((string? obj)
	  (apply string-append
	     (map (lambda (c)
		     (cond ((char=? c #\<) "&lt;")
			   ((char=? c #\>) "&gt;")
			   ((char=? c #\&) "&amp;")
			   (else (string c))))
		(string->list obj))))
	 ((symbol? obj)
	  (escape (symbol->string obj)))
	 ((pair? obj)
	  (format "(~( ))" (map escape obj)))
	 (else
	  (format "~s" obj))))

   (define (bold x)
      `("<b>" ,x "</b>"))
   
   (define (jump? x)
      (and (pair? x) (memq (car x) '(ifne ifeq go))))

   (define (go? x)
      (and (pair? x) (eq? (car x) 'go)))

   (define (dump-bb bb)
      
      (define id (bb-lbl-num bb))
      (define port-count (-fx (length (bb-succs bb)) 1))
      (define rev-rows '())
      
      (define (add-row row)
	 (set! rev-rows (cons row rev-rows)))

      (define (add-ref! from side to dotted? color)
	 (if from
	     (add-edge! (format "~a:~a ~a" id from side) to dotted? color)
	     (add-edge! (format "~a ~a" id side) to dotted? color)))
      
      (define (getport ins)
	 (when (jump? ins)
	    (let ((port port-count))
	       (set! port-count (-fx port-count 1))
	       port)))
      
      (define (decorate-instr::pair ins last-instr?)
	 
	 (define (target-id ref)
	    (string->number (substring ref 1 (string-length ref))))
	 
	 (gen-row
	    (gen-col #f #f
	       (gen-table #f
		  (gen-row
		     (if (string? ins)
			 (gen-col #f #t (list ins) :align "center")
			 (gen-col (getport ins) #f (list (format "~( )" (map escape ins))))))
		  :bgcolor (if (string? ins) (bb-color bb))))))
      
      (let ((instrs (cons (format "<b>#~a</b> [~a]" (bb-lbl-num bb) (bb-parent bb)) (bb-instrs bb))))
	 (let loop ((instrs instrs)
		    (succs (reverse (bb-succs bb)))
		    (port (-fx (length (bb-succs bb)) 1)))
	    (when (pair? instrs)
	       (let ((ins (car instrs)))
		  (cond
		     ((not (pair? ins))
		      (loop (cdr instrs) succs port))
		     ((eq? (car ins) 'go)
		      (add-ref! port ":w" (car succs) #f "green")
		      (loop (cdr instrs) (cdr succs) (-fx port 1)))
		     ((eq? (car ins) 'ifne)
		      (add-ref! port ":e" (car succs) #t "blue")
		      (loop (cdr instrs) (cdr succs) (-fx port 1)))
		     ((eq? (car ins) 'ifeq)
		      (add-ref! port ":e" (car succs) #t "red")
		      (loop (cdr instrs) (cdr succs) (-fx port 1)))
		     (else
		      (loop (cdr instrs) succs port))))))
	 (when (and (pair? instrs) (pair? (bb-succs bb)) (not (go? (car (last-pair instrs)))))
	    (add-ref! #f ":s" (car (bb-succs bb)) #f #f))
	 (add-node
	    (gen-node id
	       (gen-html-label
		  (gen-table #f
		     (let loop ((lst instrs))
			(if (pair? lst)
			    (let ((rest (cdr lst)))
			       (append (decorate-instr (car lst) (null? rest))
				  (loop rest)))
			    '()))))))))
   
   (define (dump-bbs bbs)
      (for-each dump-bb bbs))

   (dump-bbs (map list->bb (reverse bbs)))
   (for-each display (gen-digraph name)))

;*---------------------------------------------------------------------*/
;*    main ...                                                         */
;*---------------------------------------------------------------------*/
(define (main args)
   (if (pair? (cdr args))
       (dump-cfg (cadr args)
	  (call-with-input-file (cadr args) port->sexp-list))
       (dump-cfg "stdin"
	  (port->sexp-list (current-input-port)))))
